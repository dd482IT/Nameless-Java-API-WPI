package com.namelessmc.java_api;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.namelessmc.java_api.exception.NamelessException;
import com.namelessmc.java_api.exception.UnknownNamelessVersionException;
import com.namelessmc.java_api.modules.NamelessModule;
import org.checkerframework.checker.nullness.qual.Nullable;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Website implements LanguageEntity {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String version;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Update update;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<NamelessModule> modules;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String rawLanguage;

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.update" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    Website(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JsonObject json) throws NamelessException {
        if (!json.has("nameless_version")) {
            // This is usually the point where people run into issues if the response is not from NamelessMC
            // but from something else like a proxy or denial of service protection system, so we throw a useful
            // exception.
            throw new NamelessException("Website didn't include namelessmc_version in the info response. Is the response from NamelessMC?");
        }
        this.version = json.get("nameless_version").getAsString();
        this.modules = StreamSupport.stream(json.get("modules").getAsJsonArray().spliterator(), false).map(JsonElement::getAsString).map(NamelessModule::byName).collect(Collectors.toUnmodifiableSet());
        if (json.has("version_update") && false) {
            final JsonObject updateJson = json.get("version_update").getAsJsonObject();
            final boolean updateAvailable = updateJson.get("update").getAsBoolean();
            if (updateAvailable) {
                final String updateVersion = updateJson.get("version").getAsString();
                final boolean isUrgent = updateJson.get("urgent").getAsBoolean();
                this.update = new Update(isUrgent, updateVersion);
            } else {
                this.update = null;
            }
        } else {
            this.update = null;
        }
        if (json.get("locale").isJsonNull()) {
            throw new NamelessException("Website returned null locale. This can happen if you upgraded from v2-pr12 to v2-pr13, please try switching the site's language to something else and back.");
        }
        this.rawLanguage = json.get("locale").getAsString();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.update" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String rawVersion() {
        return this.version;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.update" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull NamelessVersion parsedVersion() throws UnknownNamelessVersionException {
        return NamelessVersion.parse(this.version);
    }

    /**
     * @return Information about an update, or empty if no update is available.
     */
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.update" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Update update() {
        return this.update;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.update" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<NamelessModule> modules() {
        return this.modules;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.update" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String rawLocale(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Website this) {
        return this.rawLanguage;
    }

    public static class Update {

        private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isUrgent;

        private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String version;

        Update(final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isUrgent, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String version) {
            this.isUrgent = isUrgent;
            this.version = version;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isUrgent() {
            return this.isUrgent;
        }

        @org.checkerframework.dataflow.qual.Pure
        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String rawVersion() {
            return this.version;
        }

        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull NamelessVersion parsedVersion() throws UnknownNamelessVersionException {
            return NamelessVersion.parse(this.version);
        }
    }
}
