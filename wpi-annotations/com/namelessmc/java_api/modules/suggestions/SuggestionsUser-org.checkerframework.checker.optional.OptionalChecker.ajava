package com.namelessmc.java_api.modules.suggestions;

import com.google.gson.JsonObject;
import com.namelessmc.java_api.NamelessAPI;
import com.namelessmc.java_api.NamelessUser;
import com.namelessmc.java_api.RequestHandler;
import com.namelessmc.java_api.exception.NamelessException;
import com.namelessmc.java_api.modules.NamelessModule;
import java.util.Objects;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.optional.OptionalChecker")
public class SuggestionsUser {

    private final @org.checkerframework.checker.optional.qual.MaybePresent NamelessUser user;

    private final @org.checkerframework.checker.optional.qual.MaybePresent NamelessAPI api;

    private final @org.checkerframework.checker.optional.qual.MaybePresent RequestHandler requests;

    public SuggestionsUser(final @org.checkerframework.checker.optional.qual.MaybePresent NamelessUser user) throws NamelessException {
        this.user = user;
        this.api = this.user.api();
        this.requests = this.api.requests();
        this.api.ensureModuleInstalled(NamelessModule.SUGGESTIONS);
    }

    public void like(@org.checkerframework.checker.optional.qual.MaybePresent SuggestionsUser this, final  @org.checkerframework.checker.optional.qual.MaybePresent int suggestionId) throws NamelessException {
        JsonObject body = new JsonObject();
        body.addProperty("user", this.user.userTransformer());
        this.requests.post("suggestions/like", body);
    }

    public void like(final Suggestion suggestion) throws NamelessException {
        this.like(suggestion.id());
    }

    public void dislike(@org.checkerframework.checker.optional.qual.MaybePresent SuggestionsUser this, final  @org.checkerframework.checker.optional.qual.MaybePresent int suggestionId) throws NamelessException {
        final JsonObject body = new JsonObject();
        body.addProperty("user", this.user.userTransformer());
        this.requests.post("suggestions/dislike", body);
    }

    public void dislike(final Suggestion suggestion) throws NamelessException {
        this.dislike(suggestion.id());
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent Suggestion createSuggestion(@org.checkerframework.checker.optional.qual.MaybePresent SuggestionsUser this, final @org.checkerframework.checker.optional.qual.MaybePresent String title, final @org.checkerframework.checker.optional.qual.MaybePresent String content, final  @org.checkerframework.checker.optional.qual.MaybePresent int categoryId) throws NamelessException {
        final JsonObject body = new JsonObject();
        body.addProperty("user", this.user.userTransformer());
        body.addProperty("title", Objects.requireNonNull(title, "title is null"));
        body.addProperty("content", Objects.requireNonNull(content, "content is null"));
        if (categoryId > 0) {
            body.addProperty("category", categoryId);
        }
        final JsonObject response = this.requests.post("suggestions/create", body);
        return new Suggestion(this.api, response);
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent Suggestion createSuggestion(final String title, final String content) throws NamelessException {
        return this.createSuggestion(title, content, -1);
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent Suggestion createSuggestion(final String title, final String content, final SuggestionCategory category) throws NamelessException {
        return this.createSuggestion(title, content, category.id());
    }
}
