package com.namelessmc.java_api.modules;

import org.checkerframework.checker.nullness.qual.Nullable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.optional.OptionalChecker")
public class NamelessModule {

    public static final @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule CORE = new NamelessModule("Core", true, null);

    public static final @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule FORUM = new NamelessModule("Forum", true, null);

    public static final @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule DISCORD_INTEGRATION = new NamelessModule("Discord Integration", true, null);

    public static final @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule COOKIE_CONSENT = new NamelessModule("Cookie Consent", true, null);

    public static final @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule STORE = new NamelessModule("Store", false, "https://namelessmc.com/resources/resource/139");

    public static final @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule WEBSEND = new NamelessModule("Websend", false, "https://github.com/supercrafter100/Nameless-Websend/archive/refs/heads/master.zip");

    public static final @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule SUGGESTIONS = new NamelessModule("Suggestions", false, "https://namelessmc.com/resources/resource/129");

    private final @org.checkerframework.checker.optional.qual.MaybePresent String name;

    private final  @org.checkerframework.checker.optional.qual.MaybePresent boolean included;

    private final @org.checkerframework.checker.optional.qual.MaybePresent String downloadLink;

    private NamelessModule(@org.checkerframework.checker.optional.qual.MaybePresent String name,  @org.checkerframework.checker.optional.qual.MaybePresent boolean included, @org.checkerframework.checker.optional.qual.MaybePresent String downloadLink) {
        this.name = name;
        this.included = included;
        this.downloadLink = downloadLink;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.optional.qual.MaybePresent String name(@org.checkerframework.checker.optional.qual.MaybePresent NamelessModule this) {
        return this.name;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent boolean isIncluded(@org.checkerframework.checker.optional.qual.MaybePresent NamelessModule this) {
        return this.included;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.optional.qual.MaybePresent String downloadLink(@org.checkerframework.checker.optional.qual.MaybePresent NamelessModule this) {
        return downloadLink;
    }

    private static final @org.checkerframework.checker.optional.qual.MaybePresent List<NamelessModule> MODULES = List.of(CORE, FORUM, DISCORD_INTEGRATION, COOKIE_CONSENT, STORE, WEBSEND, SUGGESTIONS);

    private static final @org.checkerframework.checker.optional.qual.MaybePresent Map<String, NamelessModule> BY_NAME = new HashMap<>();

    static {
        for (NamelessModule module : MODULES) {
            BY_NAME.put(module.name(), module);
        }
    }

    public static @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule custom(@org.checkerframework.checker.optional.qual.MaybePresent String name) {
        return new NamelessModule(Objects.requireNonNull(name), false, null);
    }

    public static @org.checkerframework.checker.optional.qual.MaybePresent NamelessModule byName(String name) {
        if (BY_NAME.containsKey(name)) {
            return BY_NAME.get(name);
        } else {
            return custom(name);
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent int hashCode(@org.checkerframework.checker.optional.qual.MaybePresent NamelessModule this) {
        return name.hashCode();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent boolean equals(@org.checkerframework.checker.optional.qual.MaybePresent NamelessModule this, final @org.checkerframework.checker.optional.qual.MaybePresent Object obj) {
        return obj instanceof NamelessModule && ((NamelessModule) obj).name().equals(this.name);
    }
}
