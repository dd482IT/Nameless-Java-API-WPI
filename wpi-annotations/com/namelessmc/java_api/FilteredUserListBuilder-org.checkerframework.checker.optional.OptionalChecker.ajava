package com.namelessmc.java_api;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.namelessmc.java_api.exception.NamelessException;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import java.util.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.optional.OptionalChecker")
public class FilteredUserListBuilder {

    private final @org.checkerframework.checker.optional.qual.MaybePresent NamelessAPI api;

    private @org.checkerframework.checker.optional.qual.MaybePresent Map<UserFilter<?>, Object> filters;

    private @org.checkerframework.checker.optional.qual.MaybePresent String operator = "AND";

    FilteredUserListBuilder(@org.checkerframework.checker.optional.qual.MaybePresent NamelessAPI api) {
        this.api = api;
    }

    public <T> @org.checkerframework.checker.optional.qual.MaybePresent FilteredUserListBuilder withFilter(final UserFilter<T> filter, final T value) {
        if (filters == null) {
            filters = new HashMap<>();
        }
        filters.put(Objects.requireNonNull(filter, "Filter is null"), Objects.requireNonNull(value, "Value for filter " + filter.name() + " is null"));
        return this;
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent FilteredUserListBuilder all() {
        this.operator = "AND";
        return this;
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent FilteredUserListBuilder any() {
        this.operator = "OR";
        return this;
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent JsonObject makeRawRequest(@org.checkerframework.checker.optional.qual.MaybePresent FilteredUserListBuilder this) throws NamelessException {
        final Object[] parameters;
        if (filters != null) {
            int filterCount = filters.size();
            parameters = new Object[2 + 4 + filterCount * 2];
            int i = 2;
            parameters[i++] = "operator";
            parameters[i++] = operator;
            parameters[i++] = "limit";
            parameters[i++] = 0;
            for (Map.Entry<UserFilter<?>, Object> filter : this.filters.entrySet()) {
                parameters[i++] = filter.getKey().name();
                parameters[i++] = filter.getValue();
            }
        } else {
            parameters = new Object[2];
        }
        // Request NamelessMC to include groups in response
        parameters[0] = "groups";
        return this.api.requests().get("users", parameters);
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent List<NamelessUser> makeRequest() throws NamelessException {
        final JsonObject response = this.makeRawRequest();
        final JsonArray array = response.getAsJsonArray("users");
        final List<NamelessUser> users = new ArrayList<>(array.size());
        for (final JsonElement e : array) {
            users.add(new NamelessUser(this.api, e.getAsJsonObject()));
        }
        return Collections.unmodifiableList(users);
    }
}
